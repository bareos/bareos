#!/bin/sh
#
# BAREOSÂ® - Backup Archiving REcovery Open Sourced
#
# Copyright (C) 2000-2011 Free Software Foundation Europe e.V.
# Copyright (C) 2013-2022 Bareos GmbH & Co. KG
#
# This program is Free Software; you can redistribute it and/or
# modify it under the terms of version three of the GNU Affero General Public
# License as published by the Free Software Foundation and included
# in the file LICENSE.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# shell script to grant privileges to the bareos database

#
# Source the Bareos config functions.
#

# change to root dir
cd /

. "@scriptdir@"/bareos-config-lib.sh

db_type="$(get_database_driver_default)"
db_name="${db_name:-$(get_database_name @db_name@)}"
db_user="${db_user:-$(get_database_user @db_user@)}"
# if $db_password is defined but empty, an empty password will be used ("-" instead of ":-")
db_password="${db_password-$(get_database_password @db_password@)}"
temp_sql_grants="/tmp/grants.sql.$$"

# Check if some parameters are given, try to detect old usage with db_type
if [ $# -gt 0 ]; then
  case "$1" in
      postgresql)
         warn "Parameter db_type is no more needed"
         shift
         ;;
      *)
         error "db_type $1 is not more supported, only postgresql"
         exit 1
         ;;
   esac
fi

# Below this line no additional parameters is allowed in command ($*)

info "Granting ${db_type} tables"


if ! get_database_grant_privileges "${db_type}" "${db_user}" "${db_password}" > "${temp_sql_grants}"
then
    error "Error creating privileges."
    exit 1
fi

PGOPTIONS='--client-min-messages=warning' psql -f "${temp_sql_grants}" -d "${db_name}"
retval=$?

rm -f "${temp_sql_grants}"

if [ ${retval} -eq 0 ]; then
   info "Privileges for user ${db_user} granted ON database ${db_name}."
else
   error "Error creating privileges."
fi

exit ${retval}
