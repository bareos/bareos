#
@MCOMMON@

srcdir =	.
.PATH:		.

# one up
basedir = ..
# top dir
topdir = ../..
# this dir relative to top dir
thisdir = src/cats

DEFS += -D_BDB_PRIV_INTERFACE_
#CPPFLAGS += @DBI_DBD_DRIVERDIR@

DEBUG=@DEBUG@
MKDIR=$(topdir)/autoconf/mkinstalldirs

first_rule: all
dummy:

#
# include files installed when using libtool
#
INCLUDE_FILES = cats.h protos.h sql_cmds.h

MYSQL_INCLUDE = @MYSQL_INCLUDE@
MYSQL_LIBS = @MYSQL_LIBS@
MYSQL_SRCS = mysql.c
MYSQL_OBJS = $(MYSQL_SRCS:.c=.o)
MYSQL_LOBJS = $(MYSQL_SRCS:.c=.lo)

POSTGRESQL_INCLUDE = @POSTGRESQL_INCLUDE@
POSTGRESQL_LIBS = @POSTGRESQL_LIBS@
POSTGRESQL_SRCS = postgresql.c
POSTGRESQL_OBJS = $(POSTGRESQL_SRCS:.c=.o)
POSTGRESQL_LOBJS = $(POSTGRESQL_SRCS:.c=.lo)

SQLITE_INCLUDE = @SQLITE_INCLUDE@
SQLITE_LIBS = @SQLITE_LIBS@
SQLITE_SRCS = sqlite.c
SQLITE_OBJS = $(SQLITE_SRCS:.c=.o)
SQLITE_LOBJS = $(SQLITE_SRCS:.c=.lo)

#INGRES_INCLUDE = @INGRES_INCLUDE@
#INGRES_LIBS = @INGRES_LIBS@
#INGRES_SRCS = ingres.c myingres.c
#INGRES_OBJS = $(INGRES_SRCS:.c=.o)
#INGRES_LOBJS = $(INGRES_SRCS:.c=.lo)

#DBI_INCLUDE = @DBI_INCLUDE@
#DBI_LIBS = @DBI_LIBS@
#DBI_SRCS = dbi.c
#DBI_OBJS = $(DBI_SRCS:.c=.o)
#DBI_LOBJS = $(DBI_SRCS:.c=.lo)

DB_LIBS=@DB_LIBS@

LIBBAREOSSQL_SRCS = bvfs.c cats.c sql.c sql_cmds.c sql_create.c sql_delete.c \
		    sql_find.c sql_get.c sql_glue.c sql_list.c sql_pooling.c \
		    sql_update.c
LIBBAREOSSQL_OBJS = $(LIBBAREOSSQL_SRCS:.c=.o)
LIBBAREOSSQL_LOBJS = $(LIBBAREOSSQL_SRCS:.c=.lo)
LIBBAREOSSQL_LT_RELEASE = @LIBBAREOSSQL_LT_RELEASE@

LIBBAREOSCATS_SRCS = mysql.c postgresql.c sqlite.c
LIBBAREOSCATS_DYN_SRCS = cats_backends.c
LIBBAREOSCATS_OBJS = $(LIBBAREOSCATS_SRCS:.c=.o)
LIBBAREOSCATS_LOBJS = $(LIBBAREOSCATS_DYN_SRCS:.c=.lo)
LIBBAREOSCATS_LT_RELEASE = @LIBBAREOSCATS_LT_RELEASE@

INCLUDES += -I$(srcdir) -I$(basedir) -I$(basedir)/include

.SUFFIXES:	.c .o .lo
.PHONY:
.DONTCARE:

# inference rules
.c.o:
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

.c.lo:
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

$(MYSQL_LOBJS):
	@echo "Compiling $(@:.lo=.c)"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(MYSQL_INCLUDE) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)

$(POSTGRESQL_LOBJS):
	@echo "Compiling $(@:.lo=.c)"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(POSTGRESQL_INCLUDE) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)

$(SQLITE_LOBJS):
	@echo "Compiling $(@:.lo=.c)"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(SQLITE_INCLUDE) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)

#$(DBI_LOBJS):
#	 @echo "Compiling $(@:.lo=.c)"
#	 $(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DBI_INCLUDE) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)

#$(INGRES_LOBJS):
#	 @echo "Compiling $(@:.lo=.c)"
#	 $(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(INGRES_INCLUDE) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)

$(MYSQL_OBJS):
	@echo "Compiling $(@:.o=.c)"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(MYSQL_INCLUDE) $(DINCLUDE) $(CXXFLAGS) $(@:.o=.c)

$(POSTGRESQL_OBJS):
	@echo "Compiling $(@:.o=.c)"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(POSTGRESQL_INCLUDE) $(DINCLUDE) $(CXXFLAGS) $(@:.o=.c)

$(SQLITE_OBJS):
	@echo "Compiling $(@:.o=.c)"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(SQLITE_INCLUDE) $(DINCLUDE) $(CXXFLAGS) $(@:.o=.c)

#$(INGRES_OBJS):
#	 @echo "Compiling $(@:.o=.c)"
#	 $(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(INGRES_INCLUDE) $(DINCLUDE) $(CXXFLAGS) $(@:.o=.c)

#$(DBI_OBJS):
#	 @echo "Compiling $(@:.o=.c)"
#	 $(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DBI_INCLUDE) $(DINCLUDE) $(CXXFLAGS) $(@:.o=.c)
#-------------------------------------------------------------------------
all: Makefile libbareossql$(DEFAULT_ARCHIVE_TYPE) libbareoscats$(DEFAULT_ARCHIVE_TYPE) @SHARED_CATALOG_TARGETS@
	@echo "==== Make of sqllibs is good ===="
	@echo " "

#esql:
#	 @echo "Generating myingres.c from myingres.sc"
#	 $(NO_ECHO)$(II_SYSTEM)/ingres/bin/esqlcc -multi -extension=c myingres.sc
#	 @echo "Generating myingres.h from myingres.sh"
#	 $(NO_ECHO)$(II_SYSTEM)/ingres/bin/esqlcc -extension=h myingres.sh

libbareossql.a: $(LIBBAREOSSQL_OBJS)
	@echo "Making $@ ..."
	$(AR) rc  $@ $(LIBBAREOSSQL_OBJS)
	$(RANLIB) $@

libbareoscats.a: $(LIBBAREOSCATS_OBJS)
	@echo "Making $@ ..."
	$(AR) rc  $@ $(LIBBAREOSCATS_OBJS)
	$(RANLIB) $@

libbareossql.la: Makefile $(LIBBAREOSSQL_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(LIBBAREOSSQL_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSSQL_LT_RELEASE) $(DB_LIBS)

libbareoscats.la: Makefile $(LIBBAREOSCATS_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(LIBBAREOSCATS_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSCATS_LT_RELEASE)

libbareoscats-mysql.la: Makefile $(MYSQL_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(MYSQL_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSCATS_LT_RELEASE) \
							   -soname libbareoscats-$(LIBBAREOSCATS_LT_RELEASE).so $(MYSQL_LIBS)

libbareoscats-postgresql.la: Makefile $(POSTGRESQL_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(POSTGRESQL_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSCATS_LT_RELEASE) \
							   -soname libbareoscats-$(LIBBAREOSCATS_LT_RELEASE).so $(POSTGRESQL_LIBS)

libbareoscats-sqlite3.la: Makefile $(SQLITE_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(SQLITE_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSCATS_LT_RELEASE) \
							   -soname libbareoscats-$(LIBBAREOSCATS_LT_RELEASE).so $(SQLITE_LIBS)

#libbareoscats-ingres.la: Makefile $(INGRES_LOBJS)
#	 @echo "Making $@ ..."
#	 $(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(INGRES_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSCATS_LT_RELEASE) \
#							    -soname libbareoscats-$(LIBBAREOSCATS_LT_RELEASE).so $(INGRES_LIBS)

#libbareoscats-dbi.la: Makefile $(DBI_LOBJS)
#	 @echo "Making $@ ..."
#	 $(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(DBI_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSCATS_LT_RELEASE) \
#							    -soname libbareoscats-$(LIBBAREOSCATS_LT_RELEASE).so $(DBI_LIBS)

Makefile: $(srcdir)/Makefile.in $(topdir)/config.status
	cd $(topdir) \
	  && CONFIG_FILES=$(thisdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

libtool-clean:
	@find . -name '*.lo' -print | xargs $(LIBTOOL_CLEAN) $(RMF)
	@$(RMF) *.la
	@$(RMF) -r .libs _libs

clean:	libtool-clean
	@$(RMF) core a.out *.o *.bak *~ *.intpro *.extpro 1 2 3

realclean: clean
	$(RMF) tags

	$(RMF) create_bareos_database	   update_bareos_tables     make_bareos_tables
	$(RMF) grant_bareos_privileges	   drop_bareos_tables	    drop_bareos_database

	$(RMF) make_catalog_backup make_catalog_backup.pl delete_catalog_backup

distclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)

devclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)

install-includes:
	$(MKDIR) $(DESTDIR)/$(includedir)/bareos/sql
	for I in $(INCLUDE_FILES); do \
	   $(INSTALL_DATA) $$I $(DESTDIR)$(includedir)/bareos/sql/`basename $$I`; \
	done

libtool-install-default-backend:
	./install-default-backend @DEFAULT_DB_TYPE@ $(LIBBAREOSCATS_LT_RELEASE) $(DESTDIR)$(libdir)

libtool-install: all
	$(MKDIR) $(DESTDIR)$(libdir)
	$(RMF) $(DESTDIR)$(libdir)/libbareossql-[0-9]*.so $(DESTDIR)$(libdir)/libbareossql.la
	$(RMF) $(DESTDIR)$(libdir)/libbareoscats-[0-9]*.so $(DESTDIR)$(libdir)/libbareoscats.la
	$(LIBTOOL_INSTALL_FINISH) $(INSTALL_LIB) libbareossql.la $(DESTDIR)$(libdir)
	$(LIBTOOL_INSTALL_FINISH) $(INSTALL_LIB) libbareoscats.la $(DESTDIR)$(libdir)
	for db_type in @DB_BACKENDS@; do \
	    $(RMF) $(DESTDIR)$(libdir)/libbareoscats-$${db_type}-[0-9]*.so; \
	    $(LIBTOOL_INSTALL_FINISH) $(INSTALL_LIB) libbareoscats-$${db_type}.la $(DESTDIR)$(libdir); \
	    $(RM) $(DESTDIR)$(libdir)/libbareoscats-$${db_type}.la; \
	done

install: @LIBTOOL_INSTALL_TARGET@ @LIBTOOL_INSTALL_DEFAULT_BACKEND_TARGET@ @INCLUDE_INSTALL_TARGET@
	$(INSTALL_SCRIPT) create_bareos_database $(DESTDIR)$(scriptdir)/create_bareos_database
	$(INSTALL_SCRIPT) update_bareos_tables $(DESTDIR)$(scriptdir)/update_bareos_tables
	$(INSTALL_SCRIPT) make_bareos_tables $(DESTDIR)$(scriptdir)/make_bareos_tables
	$(INSTALL_SCRIPT) grant_bareos_privileges $(DESTDIR)$(scriptdir)/grant_bareos_privileges
	$(INSTALL_SCRIPT) drop_bareos_tables $(DESTDIR)$(scriptdir)/drop_bareos_tables
	$(INSTALL_SCRIPT) drop_bareos_database $(DESTDIR)$(scriptdir)/drop_bareos_database

	#
	# Make sure the DDL subdir exists.
	#
	@if ! test -d $(DESTDIR)$(scriptdir)/ddl; then \
	   $(MKDIR) $(DESTDIR)$(scriptdir)/ddl; \
	fi;
	$(INSTALL_DATA) ddl/versions.map $(DESTDIR)$(scriptdir)/ddl/

	#
	# Install all DDL schemas for Drop, Grant, Create and Update
	#
	@for db_type in @DB_BACKENDS@; do \
           for dir in drops grants creates updates; do \
	      if ! test -d $(DESTDIR)$(scriptdir)/ddl/$$dir; then \
	         $(MKDIR) $(DESTDIR)$(scriptdir)/ddl/$$dir; \
	      fi; \
	      if test `ls -1 ddl/$$dir/$$db_type*.sql 2>/dev/null | wc -l` -gt 0; then \
	         $(INSTALL_DATA) ddl/$$dir/$$db_type*.sql $(DESTDIR)$(scriptdir)/ddl/$$dir; \
	      fi; \
	   done \
	done

	@filename=make_catalog_backup.pl; \
	   if  test -f $(DESTDIR)$(scriptdir)/$$filename; then \
	      destname=$$filename.new; \
	      echo "  ==> Found existing $$filename, installing new file as $$destname"; \
	   else \
	      destname=$$filename; \
	   fi; \
	   echo "$(INSTALL_SCRIPT) $$filename $(DESTDIR)$(scriptdir)/$$destname"; \
	   $(INSTALL_SCRIPT) $$filename $(DESTDIR)$(scriptdir)/$$destname
	@filename=make_catalog_backup; \
	   if  test -f $(DESTDIR)$(scriptdir)/$$filename; then \
	      destname=$$filename.new; \
	      echo "  ==> Found existing $$filename, installing new file as $$destname"; \
	   else \
	      destname=$$filename; \
	   fi; \
	   echo "$(INSTALL_SCRIPT) $$filename $(DESTDIR)$(scriptdir)/$$destname"; \
	   $(INSTALL_SCRIPT) $$filename $(DESTDIR)$(scriptdir)/$$destname
	@filename=delete_catalog_backup; \
	   if  test -f $(DESTDIR)$(scriptdir)/$$filename; then \
	      destname=$$filename.new; \
	      echo "  ==> Found existing $$filename, installing new file as $$destname"; \
	   else \
	      destname=$$filename; \
	   fi; \
	   echo "$(INSTALL_SCRIPT) $$filename $(DESTDIR)$(scriptdir)/$$destname"; \
	   $(INSTALL_SCRIPT) $$filename $(DESTDIR)$(scriptdir)/$$destname

# Semi-automatic generation of dependencies:
# Use gcc -M because X11 `makedepend' doesn't work on all systems
# and it also includes system headers.
# `semi'-automatic since dependencies are generated at distribution time.

#depend: esql  <-  SRE: if generating from 'real' ingres source
depend:
	@$(MV) Makefile Makefile.bak
	@$(SED) "/^# DO NOT DELETE:/,$$ d" Makefile.bak > Makefile
	@$(ECHOCMD) "# DO NOT DELETE: nice dependency list follows" >> Makefile
	@for src in $(LIBBAREOSSQL_SRCS); do \
	    $(CXX) -S -M -MT `basename $$src .c`$(DEFAULT_OBJECT_TYPE) $(CPPFLAGS) $(XINC) $(DEFS) $(INCLUDES) $$src >> Makefile; \
	done
	@for src in $(MYSQL_SRCS); do \
	    $(CXX) -S -M -MT `basename $$src .c`$(DEFAULT_OBJECT_TYPE) $(CPPFLAGS) $(XINC) $(DEFS) $(INCLUDES) $(MYSQL_INCLUDE) $$src >> Makefile; \
	done
	@for src in $(POSTGRESQL_SRCS); do \
	    $(CXX) -S -M -MT `basename $$src .c`$(DEFAULT_OBJECT_TYPE) $(CPPFLAGS) $(XINC) $(DEFS) $(INCLUDES) $(POSTGRESQL_INCLUDE) $$src >> Makefile; \
	done
	@for src in $(SQLITE_SRCS); do \
	    $(CXX) -S -M -MT `basename $$src .c`$(DEFAULT_OBJECT_TYPE) $(CPPFLAGS) $(XINC) $(DEFS) $(INCLUDES) $(SQLITE_INCLUDE) $$src >> Makefile; \
	done
#	 @for src in $(DBI_SRCS); do \
#	     $(CXX) -S -M -MT `basename $$src .c`$(DEFAULT_OBJECT_TYPE) $(CPPFLAGS) $(XINC) $(DEFS) $(INCLUDES) $(DBI_INCLUDE) $$src >> Makefile; \
#	 done
	@if test -f Makefile ; then \
	    $(RMF) Makefile.bak; \
	else \
	   $(MV) Makefile.bak Makefile; \
	   echo " ===== Something went wrong in make depend ====="; \
	fi

# -----------------------------------------------------------------------
# DO NOT DELETE: nice dependency list follows
