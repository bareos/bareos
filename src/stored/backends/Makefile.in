#
@MCOMMON@

srcdir =	.
.PATH:		.

# one up
basedir = ../..
# top dir
topdir = ../../..
# this dir relative to top dir
thisdir = src/stored/backends

DEBUG=@DEBUG@
MKDIR=$(topdir)/autoconf/mkinstalldirs

first_rule: all
dummy:

CEPHFS_INC = @CEPHFS_INC@
DROPLET_INC = @DROPLET_INC@
GLUSTER_INC = @GLUSTER_INC@
RADOS_INC = @RADOS_INC@

CEPHFS_LIBS = @CEPHFS_LIBS@
DROPLET_LIBS = @DROPLET_LIBS@
GLUSTER_LIBS = @GLUSTER_LIBS@
RADOS_LIBS = @RADOS_LIBS@

CHEPHFS_SRCS = cephfs_device.c
CHEPHFS_LOBJS = $(CHEPHFS_SRCS:.c=.lo)

GFAPI_SRCS = gfapi_device.c
GFAPI_LOBJS = $(GFAPI_SRCS:.c=.lo)

OBJECT_SRCS = object_store_device.c
OBJECT_LOBJS = $(OBJECT_SRCS:.c=.lo)

RADOS_SRCS = rados_device.c
RADOS_LOBJS = $(RADOS_SRCS:.c=.lo)

FIFO_SRCS = unix_fifo_device.c
FIFO_LOBJS = $(FIFO_SRCS:.c=.lo)

GEN_TAPE_SRCS = generic_tape_device.c
GEN_TAPE_LOBJS = $(GEN_TAPE_SRCS:.c=.lo)

TAPE_SRCS = unix_tape_device.c
TAPE_LOBJS = $(TAPE_SRCS:.c=.lo)

LIBBAREOSSD_LT_RELEASE = @LIBBAREOSSD_LT_RELEASE@

INCLUDES += -I$(srcdir) -I.. -I$(basedir) -I$(basedir)/include

BUILD_BACKENDS = @BUILD_SD_BACKENDS@

.SUFFIXES:	.c .o .lo
.PHONY:
.DONTCARE:

# inference rules
.c.o:
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

.c.lo:
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

$(CHEPHFS_LOBJS):
	@echo "Compiling $(@:.lo=.c)"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(CEPHFS_INC) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)

$(GFAPI_LOBJS):
	@echo "Compiling $(@:.lo=.c)"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(GLUSTER_INC) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)

$(OBJECT_LOBJS):
	@echo "Compiling $(@:.lo=.c)"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DROPLET_INC) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)

$(RADOS_LOBJS):
	@echo "Compiling $(@:.lo=.c)"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(RADOS_INC) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)

#-------------------------------------------------------------------------
all: Makefile $(BUILD_BACKENDS)
	@echo "==== Make of sd-backends is good ===="
	@echo " "

libbareossd-cephfs.la: Makefile $(CHEPHFS_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(CHEPHFS_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-cephfs-$(LIBBAREOSSD_LT_RELEASE).so $(CEPHFS_LIBS)

libbareossd-gfapi.la: Makefile $(GFAPI_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(GFAPI_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-gfapi-$(LIBBAREOSSD_LT_RELEASE).so $(GLUSTER_LIBS)

libbareossd-object.la: Makefile $(OBJECT_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(OBJECT_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-object-$(LIBBAREOSSD_LT_RELEASE).so $(DROPLET_LIBS)

libbareossd-rados.la: Makefile $(RADOS_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(RADOS_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-rados-$(LIBBAREOSSD_LT_RELEASE).so $(RADOS_LIBS)

libbareossd-fifo.la: Makefile $(FIFO_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(FIFO_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-fifo-$(LIBBAREOSSD_LT_RELEASE).so

libbareossd-gentape.la: Makefile $(GEN_TAPE_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(GEN_TAPE_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-gentape-$(LIBBAREOSSD_LT_RELEASE).so

libbareossd-tape.la: Makefile libbareossd-gentape.la $(TAPE_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(TAPE_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-tape-$(LIBBAREOSSD_LT_RELEASE).so libbareossd-gentape.la

Makefile: $(srcdir)/Makefile.in $(topdir)/config.status
	cd $(topdir) \
	  && CONFIG_FILES=$(thisdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

libtool-clean:
	@find . -name '*.lo' -print | xargs $(LIBTOOL_CLEAN) $(RMF)
	@$(RMF) *.la
	@$(RMF) -r .libs _libs

clean:	libtool-clean
	@$(RMF) core a.out *.o *.bak *~ *.intpro *.extpro 1 2 3

realclean: clean
	$(RMF) tags

distclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)

devclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)

libtool-install: all
	$(MKDIR) $(DESTDIR)$(libdir)
	@for backend in $(BUILD_BACKENDS); do \
	   $(LIBTOOL_INSTALL_FINISH) $(INSTALL_LIB) $$backend $(DESTDIR)$(libdir); \
	   $(RM) $(DESTDIR)$(libdir)/$$backend; \
	done

install: @LIBTOOL_INSTALL_TARGET@

depend:
