#
@MCOMMON@

srcdir =	.
.PATH:		.

# one up
basedir = ../..
# top dir
topdir = ../../..
# this dir relative to top dir
thisdir = src/stored/backends

DEBUG=@DEBUG@
MKDIR=$(topdir)/autoconf/mkinstalldirs

first_rule: all
dummy:

CEPHFS_INC = @CEPHFS_INC@
DROPLET_INC = @DROPLET_INC@
ELASTO_INC = @ELASTO_INC@
GLUSTER_INC = @GLUSTER_INC@
RADOS_INC = @RADOS_INC@ @RADOS_STRIPER_INC@

CEPHFS_LIBS = @CEPHFS_LIBS@
DROPLET_LIBS = @DROPLET_LIBS@
ELASTO_LIBS = @ELASTO_LIBS@
GLUSTER_LIBS = @GLUSTER_LIBS@
RADOS_LIBS = @RADOS_STRIPER_LIBS@ @RADOS_LIBS@

CHEPHFS_SRCS = cephfs_device.c
CHEPHFS_LOBJS = $(CHEPHFS_SRCS:.c=.lo)

CHUNKED_SRCS = chunked_device.c
CHUNKED_LOBJS = $(CHUNKED_SRCS:.c=.lo)

DROPLET_SRCS = droplet_device.c
DROPLET_LOBJS = $(DROPLET_SRCS:.c=.lo)

ELASTO_SRCS = elasto_device.c
ELASTO_LOBJS = $(ELASTO_SRCS:.c=.lo)

FIFO_SRCS = unix_fifo_device.c
FIFO_LOBJS = $(FIFO_SRCS:.c=.lo)

GEN_TAPE_SRCS = generic_tape_device.c
GEN_TAPE_LOBJS = $(GEN_TAPE_SRCS:.c=.lo)

GFAPI_SRCS = gfapi_device.c
GFAPI_LOBJS = $(GFAPI_SRCS:.c=.lo)

RADOS_SRCS = rados_device.c
RADOS_LOBJS = $(RADOS_SRCS:.c=.lo)

TAPE_SRCS = unix_tape_device.c
TAPE_LOBJS = $(TAPE_SRCS:.c=.lo)

LIBBAREOSSD_LT_RELEASE = @LIBBAREOSSD_LT_RELEASE@

INCLUDES += -I$(srcdir) -I.. -I$(basedir) -I$(basedir)/include

BUILD_BACKENDS = @BUILD_SD_BACKENDS@

CONF_EXTRA_DIR = config.d

STORED_RESTYPES = autochanger device director ndmp messages storage

.SUFFIXES:	.c .o .lo
.PHONY:
.DONTCARE:

# inference rules
.c.o:
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

.c.lo:
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<
	if [ -d "$(@:.lo=.d)" ]; then $(MKDIR) $(CONF_EXTRA_DIR); $(CP) -r $(@:.lo=.d)/. $(CONF_EXTRA_DIR)/.; fi

$(CHEPHFS_LOBJS):
	@echo "Compiling $(@:.lo=.c)"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(CEPHFS_INC) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)
	if [ -d "$(@:.lo=.d)" ]; then $(MKDIR) $(CONF_EXTRA_DIR); $(CP) -r $(@:.lo=.d)/. $(CONF_EXTRA_DIR)/.; fi

$(DROPLET_LOBJS):
	@echo "Compiling $(@:.lo=.c)"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DROPLET_INC) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)
	if [ -d "$(@:.lo=.d)" ]; then $(MKDIR) $(CONF_EXTRA_DIR); $(CP) -r $(@:.lo=.d)/. $(CONF_EXTRA_DIR)/.; fi

$(ELASTO_LOBJS):
	@echo "Compiling $(@:.lo=.c)"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(ELASTO_INC) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)
	if [ -d "$(@:.lo=.d)" ]; then $(MKDIR) $(CONF_EXTRA_DIR); $(CP) -r $(@:.lo=.d)/. $(CONF_EXTRA_DIR)/.; fi

$(GFAPI_LOBJS):
	@echo "Compiling $(@:.lo=.c)"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(GLUSTER_INC) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)
	if [ -d "$(@:.lo=.d)" ]; then $(MKDIR) $(CONF_EXTRA_DIR); $(CP) -r $(@:.lo=.d)/. $(CONF_EXTRA_DIR)/.; fi

$(RADOS_LOBJS):
	@echo "Compiling $(@:.lo=.c)"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(RADOS_INC) $(DINCLUDE) $(CXXFLAGS) $(@:.lo=.c)
	if [ -d "$(@:.lo=.d)" ]; then $(MKDIR) $(CONF_EXTRA_DIR); $(CP) -r $(@:.lo=.d)/. $(CONF_EXTRA_DIR)/.; fi

#-------------------------------------------------------------------------
all: Makefile $(BUILD_BACKENDS)
	@echo "==== Make of sd-backends is good ===="
	@echo " "

libbareossd-cephfs.la: Makefile $(CHEPHFS_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -L../../lib -o $@ $(CHEPHFS_LOBJS) -export-dynamic -rpath $(backenddir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-cephfs-$(LIBBAREOSSD_LT_RELEASE).so $(CEPHFS_LIBS) -lbareos

libbareossd-chunked.la: Makefile $(CHUNKED_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -L../../lib -o $@ $(CHUNKED_LOBJS) -export-dynamic -rpath $(backenddir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-chunked-$(LIBBAREOSSD_LT_RELEASE).so -lbareos

libbareossd-droplet.la: Makefile libbareossd-chunked.la $(DROPLET_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -L../../lib -o $@ $(DROPLET_LOBJS) -export-dynamic -rpath $(backenddir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-droplet-$(LIBBAREOSSD_LT_RELEASE).so $(DROPLET_LIBS) libbareossd-chunked.la -lbareos

libbareossd-elasto.la: Makefile $(ELASTO_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -L../../lib -o $@ $(ELASTO_LOBJS) -export-dynamic -rpath $(backenddir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-elasto-$(LIBBAREOSSD_LT_RELEASE).so $(ELASTO_LIBS) -lbareos

libbareossd-fifo.la: Makefile $(FIFO_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -L../../lib -o $@ $(FIFO_LOBJS) -export-dynamic -rpath $(backenddir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-fifo-$(LIBBAREOSSD_LT_RELEASE).so -lbareos

libbareossd-gentape.la: Makefile $(GEN_TAPE_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -L../../lib -o $@ $(GEN_TAPE_LOBJS) -export-dynamic -rpath $(backenddir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-gentape-$(LIBBAREOSSD_LT_RELEASE).so -lbareos

libbareossd-gfapi.la: Makefile $(GFAPI_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -L../../lib -o $@ $(GFAPI_LOBJS) -export-dynamic -rpath $(backenddir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-gfapi-$(LIBBAREOSSD_LT_RELEASE).so $(GLUSTER_LIBS) -lbareos

libbareossd-rados.la: Makefile $(RADOS_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -L../../lib -o $@ $(RADOS_LOBJS) -export-dynamic -rpath $(backenddir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-rados-$(LIBBAREOSSD_LT_RELEASE).so $(RADOS_LIBS) -lbareos

libbareossd-tape.la: Makefile libbareossd-gentape.la $(TAPE_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -L../../lib -o $@ $(TAPE_LOBJS) -export-dynamic -rpath $(backenddir) -release $(LIBBAREOSSD_LT_RELEASE) \
							   -soname libbareossd-tape-$(LIBBAREOSSD_LT_RELEASE).so libbareossd-gentape.la -lbareos

Makefile: $(srcdir)/Makefile.in $(topdir)/config.status
	cd $(topdir) \
	  && CONFIG_FILES=$(thisdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

libtool-clean:
	@find . -name '*.lo' -print | xargs $(LIBTOOL_CLEAN) $(RMF)
	@$(RMF) *.la
	@$(RMF) -r .libs _libs

clean:	libtool-clean
	@$(RMF) core a.out *.o *.bak *~ *.intpro *.extpro 1 2 3
	@$(RMF) -r $(CONF_EXTRA_DIR)

realclean: clean
	$(RMF) tags

distclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)

devclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)

libtool-install: all
	$(RMF) $(DESTDIR)$(backenddir)/libbareossd-*.so
	$(MKDIR) $(DESTDIR)$(backenddir)
	@for backend in $(BUILD_BACKENDS); do \
	   $(LIBTOOL_INSTALL_FINISH) $(INSTALL_LIB) $$backend $(DESTDIR)$(backenddir); \
	   $(RM) $(DESTDIR)$(backenddir)/$$backend; \
	done

install-config:
	# copy configuration resource files to directory structure
	@for COMPONENT in bareos-dir.d bareos-sd.d; do \
		SRCCONFDIR=$(CONF_EXTRA_DIR)/$$COMPONENT/; \
		DESTCONFDIR=${DESTDIR}${confdir}/$$COMPONENT/; \
		echo "installing configuration resource files to $$DESTCONFDIR"; \
		$(MKDIR) $$DESTCONFDIR; \
		for RESTYPE in $(STORED_RESTYPES); do \
			for f in $$SRCCONFDIR/$$RESTYPE/*.conf $$SRCCONFDIR/$$RESTYPE/*.conf.example; do \
				if test -f "$$f"; then \
					RESDIR="$$DESTCONFDIR/$$RESTYPE"; \
					$(MKDIR) "$$RESDIR"; \
					RES=`basename "$$f"`; \
					if test -f "$$RESDIR/$$RES"; then \
						destconf="$$RESDIR/$$RES.new"; \
						echo "    $$RESTYPE/$$RES as \"$$destconf\" (keep existing)"; \
					else \
						destconf="$$RESDIR/$$RES"; \
						echo "    $$RESTYPE/$$RES as \"$$destconf\""; \
					fi; \
					${INSTALL_CONFIG} "$$f" "$$destconf"; \
					if test "x${sd_group}" != "x"; then \
						chgrp -f ${sd_group} $$destconf || true; \
					fi; \
				fi; \
			done; \
		done; \
	done


install: @LIBTOOL_INSTALL_TARGET@ install-config

depend:
