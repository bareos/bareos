#
#  Find files library Makefile
#
@MCOMMON@

srcdir = @srcdir@
VPATH = @srcdir@
.PATH: @srcdir@

# one up
basedir = ..
# top dir
topdir = ../..
# this dir relative to top dir
thisdir = src/findlib

DEBUG=@DEBUG@

first_rule: all
dummy:

#
# include files installed when using libtool
#
INCLUDE_FILES = bfile.h find.h protos.h

#
LIBBAREOSFIND_SRCS = acl.c attribs.c bfile.c create_file.c \
		     drivetype.c enable_priv.c find_one.c \
		     find.c fstype.c hardlink.c match.c mkpath.c \
		     savecwd.c shadowing.c xattr.c

LIBBAREOSFIND_OBJS = $(LIBBAREOSFIND_SRCS:.c=.o)
LIBBAREOSFIND_LOBJS = $(LIBBAREOSFIND_SRCS:.c=.lo)

LIBBAREOSFIND_LT_RELEASE = @LIBBAREOSFIND_LT_RELEASE@

AFS_CFLAGS = @AFS_CFLAGS@
ACL_LIBS = @ACL_LIBS@
XATTR_LIBS = @XATTR_LIBS@
AFS_LIBS = @AFS_LIBS@

INCLUDES += -I$(srcdir) -I$(basedir) -I$(basedir)/include

.SUFFIXES:	.c .o .lo
.PHONY:
.DONTCARE:

# inference rules
.c.o:
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

.c.lo:
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<
#-------------------------------------------------------------------------
all: Makefile libbareosfind$(DEFAULT_ARCHIVE_TYPE) ../lib/libbareos$(DEFAULT_ARCHIVE_TYPE)
	@echo "==== Make of findlib is good ===="
	@echo " "

acl.o: acl.c
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $(AFS_CFLAGS) $<

acl.lo: acl.c
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $(AFS_CFLAGS) $<

libbareosfind.a: $(LIBBAREOSFIND_OBJS)
	@echo "Making $@ ..."
	$(AR) rc  $@ $(LIBBAREOSFIND_OBJS)
	$(RANLIB) $@

libbareosfind.la: Makefile $(LIBBAREOSFIND_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(LIBBAREOSFIND_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSFIND_LT_RELEASE) $(ACL_LIBS) $(XATTR_LIBS) $(AFS_LIBS)

Makefile: $(srcdir)/Makefile.in $(topdir)/config.status
	cd $(topdir) \
	  && CONFIG_FILES=$(thisdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

install-includes:
	$(MKDIR) $(DESTDIR)/$(includedir)/bareos/findlib
	for I in $(INCLUDE_FILES); do \
	   $(INSTALL_DATA) $$I $(DESTDIR)$(includedir)/bareos/findlib/`basename $$I`; \
	done

libtool-install: all
	$(MKDIR) $(DESTDIR)$(libdir)
	$(RMF) $(DESTDIR)$(libdir)/libbareosfind-*.so $(DESTDIR)$(libdir)/libbareosfind.la
	$(LIBTOOL_INSTALL_FINISH) $(INSTALL_LIB) libbareosfind$(DEFAULT_ARCHIVE_TYPE) $(DESTDIR)$(libdir)

install: @LIBTOOL_INSTALL_TARGET@ @INCLUDE_INSTALL_TARGET@

libtool-clean:
	@find . -name '*.lo' -print | xargs $(LIBTOOL_CLEAN) $(RMF)
	@$(RMF) *.la
	@$(RMF) -r .libs _libs

clean:	libtool-clean
	@$(RMF) find core a.out *.o *.bak *~ *.intpro *.extpro 1 2 3

realclean: clean
	@$(RMF) tags

distclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)

devclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)

# Semi-automatic generation of dependencies:
# Use gcc -M  because X11 `makedepend' doesn't work on all systems
# and it also includes system headers.
# `semi'-automatic since dependencies are generated at distribution time.

depend:
	@$(MV) Makefile Makefile.bak
	@$(SED) "/^# DO NOT DELETE:/,$$ d" Makefile.bak > Makefile
	@$(ECHOCMD) "# DO NOT DELETE: nice dependency list follows" >> Makefile
	@for src in $(LIBBAREOSFIND_SRCS); do \
	    $(CXX) -S -M -MT `basename $$src .c`$(DEFAULT_OBJECT_TYPE) $(CPPFLAGS) $(AFS_CFLAGS) $(XINC) $(INCLUDES) $$src >> Makefile; \
	done
	@if test -f Makefile ; then \
	    $(RMF) Makefile.bak; \
	else \
	   $(MV) Makefile.bak Makefile; \
	   echo " ===== Something went wrong in make depend ====="; \
	fi

# -----------------------------------------------------------------------
# DO NOT DELETE: nice dependency list follows
