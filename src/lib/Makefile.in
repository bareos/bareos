#

@MCOMMON@

# Define library versions
LIBBAREOS_LT_RELEASE = @LIBBAREOS_LT_RELEASE@
LIBBAREOSCFG_LT_RELEASE = @LIBBAREOSCFG_LT_RELEASE@

srcdir = @srcdir@
VPATH = @srcdir@
.PATH: @srcdir@

# one up
basedir = ..
# top dir
topdir = ../..
# this dir relative to top dir
thisdir = src/lib

CPPFLAGS += @ZLIB_INC@

COMPRESS_CPPFLAGS += @ZLIB_INC@ @LZO_INC@ @FASTLZ_INC@
JANSSON_CPPFLAGS = @JANSSON_INC@

DEBUG = @DEBUG@
CAM_LIBS = @CAM_LIBS@
CAP_LIBS = @CAP_LIBS@
ZLIB_LIBS = @ZLIB_LIBS@
LZO_LIBS = @LZO_LIBS@
FASTLZ_LIBS = @FASTLZ_LIBS@
JANSSON_LIBS = @JANSSON_LIBS@

first_rule: all
dummy:

#
# include files installed when using libtool
#
INCLUDE_FILES = ../include/baconfig.h ../include/bareos.h \
		../include/bc_types.h ../include/config.h \
		../include/jcr.h ../include/version.h \
		address_conf.h alist.h attr.h base64.h berrno.h \
		bits.h bpipe.h breg.h bregex.h bsock.h bsock_sctp.h \
		bsock_tcp.h bsock_udt.h bsr.h btime.h btimers.h cbuf.h \
		crypto.h crypto_cache.h devlock.h dlist.h fnmatch.h \
		guid_to_name.h htable.h ini.h lex.h lib.h lockmgr.h \
		md5.h mem_pool.h message.h mntent_cache.h ordered_cbuf.h \
		parse_conf.h plugins.h protos.h queue.h rblist.h \
		runscript.h rwlock.h scsi_crypto.h scsi_lli.h \
		scsi_tapealert.h sellist.h serial.h sha1.h smartall.h \
		status.h tls.h tree.h var.h waitq.h watchdog.h workq.h

#
# libbareos
#
LIBBAREOS_SRCS = address_conf.c alist.c attr.c attribs.c base64.c \
	         berrno.c bget_msg.c binflate.c bnet_server_tcp.c bnet.c \
	         bpipe.c breg.c bregex.c bsnprintf.c bsock.c bsock_sctp.c \
		 bsock_tcp.c bsock_udt.c bsys.c btime.c btimers.c \
		 cbuf.c compression.c connection_pool.c cram-md5.c crypto.c \
		 crypto_cache.c crypto_gnutls.c crypto_none.c crypto_nss.c \
		 crypto_openssl.c crypto_wrap.c daemon.c devlock.c dlist.c \
		 edit.c fnmatch.c guid_to_name.c hmac.c htable.c jcr.c json.c \
		 lockmgr.c md5.c mem_pool.c message.c mntent_cache.c ordered_cbuf.c \
		 output_formatter.c passphrase.c path_list.c plugins.c poll.c \
		 priv.c queue.c rblist.c runscript.c rwlock.c scan.c scsi_crypto.c \
		 scsi_lli.c scsi_tapealert.c sellist.c serial.c sha1.c signal.c \
		 smartall.c tls_gnutls.c tls_none.c tls_nss.c tls_openssl.c \
		 tree.c util.c var.c watchdog.c workq.c

LIBBAREOS_OBJS = $(LIBBAREOS_SRCS:.c=.o)
LIBBAREOS_LOBJS = $(LIBBAREOS_SRCS:.c=.lo)

#
# libbareoscfg (config functions)
#
LIBBAREOSCFG_SRCS = ini.c lex.c parse_bsr.c parse_conf.c res.c
LIBBAREOSCFG_OBJS = $(LIBBAREOSCFG_SRCS:.c=.o)
LIBBAREOSCFG_LOBJS = $(LIBBAREOSCFG_SRCS:.c=.lo)

INCLUDES += -I$(srcdir) -I$(basedir) -I$(basedir)/include

.SUFFIXES:	.c .cc .o .lo .ch .dvi .pdf .tex .view .w .1
.PHONY:
.DONTCARE:

# inference rules
.c.o:
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

.c.lo:
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<
#-------------------------------------------------------------------------
all: Makefile libbareos$(DEFAULT_ARCHIVE_TYPE) libbareoscfg$(DEFAULT_ARCHIVE_TYPE)
	@echo "==== Make of lib is good ===="
	@echo " "

check: libbareos$(DEFAULT_ARCHIVE_TYPE)
	$(MAKE) -C unittests $@

libbareoscfg$(DEFAULT_ARCHIVE_TYPE): libbareos$(DEFAULT_ARCHIVE_TYPE)

crypto_openssl.o: crypto_openssl.c
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(OPENSSL_INCLUDES) $(CXXFLAGS) $<

crypto_openssl.lo: crypto_openssl.c
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(OPENSSL_INCLUDES) $(CXXFLAGS) $<

tls_openssl.o: tls_openssl.c
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(OPENSSL_INCLUDES) $(CXXFLAGS) $<

tls_openssl.lo: tls_openssl.c
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(OPENSSL_INCLUDES) $(CXXFLAGS) $<

crypto_gnutls.o: crypto_gnutls.c
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(GNUTLS_INCLUDES) $(CXXFLAGS) $<

crypto_gnutls.lo: crypto_gnutls.c
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(GNUTLS_INCLUDES) $(CXXFLAGS) $<

tls_gnutls.o: tls_gnutls.c
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(GNUTLS_INCLUDES) $(CXXFLAGS) $<

tls_gnutls.lo: tls_gnutls.c
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(GNUTLS_INCLUDES) $(CXXFLAGS) $<

crypto_wrap.o: crypto_wrap.c
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(OPENSSL_INCLUDES) $(GNUTLS_INCLUDES) $(CXXFLAGS) $<

crypto_wrap.lo: crypto_wrap.c
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(OPENSSL_INCLUDES) $(GNUTLS_INCLUDES) $(CXXFLAGS) $<

passphrase.o: passphrase.c
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(OPENSSL_INCLUDES) $(GNUTLS_INCLUDES) $(CXXFLAGS) $<

passphrase.lo: passphrase.c
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(OPENSSL_INCLUDES) $(GNUTLS_INCLUDES) $(CXXFLAGS) $<

compression.o: compression.c
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(COMPRESS_CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

compression.lo: compression.c
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(COMPRESS_CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

json.o: json.c
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(JANSSON_CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

json.lo: json.c
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(JANSSON_CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

output_formatter.o: output_formatter.c
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(JANSSON_CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

output_formatter.lo: output_formatter.c
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(JANSSON_CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

res.o: res.c
	@echo "Compiling $<"
	$(NO_ECHO)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(JANSSON_CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

res.lo: res.c
	@echo "Compiling $<"
	$(NO_ECHO)$(LIBTOOL_COMPILE) $(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) $(JANSSON_CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<


libbareos.a: $(LIBBAREOS_OBJS)
	@echo "Making $@ ..."
	$(AR) rc  $@ $(LIBBAREOS_OBJS)
	$(RANLIB) $@

libbareos.la: Makefile $(LIBBAREOS_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(LIBBAREOS_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOS_LT_RELEASE) \
	                $(WRAPLIBS) $(CAM_LIBS) $(CAP_LIBS) $(ZLIB_LIBS) $(LZO_LIBS) $(FASTLZ_LIBS) $(JANSSON_LIBS) $(OPENSSL_LIBS) $(GNUTLS_LIBS) $(LIBS) $(DLLIBS)

libbareoscfg.a: $(LIBBAREOSCFG_OBJS)
	@echo "Making $@ ..."
	$(AR) rc  $@ $(LIBBAREOSCFG_OBJS)
	$(RANLIB) $@

libbareoscfg.la: Makefile $(LIBBAREOSCFG_LOBJS)
	@echo "Making $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(DEFS) $(DEBUG) $(LDFLAGS) -o $@ $(LIBBAREOSCFG_LOBJS) -export-dynamic -rpath $(libdir) -release $(LIBBAREOSCFG_LT_RELEASE) \
	                $(LIBS) -lbareos

Makefile: $(srcdir)/Makefile.in $(topdir)/config.status
	cd $(topdir) \
	  && CONFIG_FILES=$(thisdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

install-includes:
	$(MKDIR) $(DESTDIR)/$(includedir)/bareos
	for I in $(INCLUDE_FILES); do \
	   $(INSTALL_DATA) $$I $(DESTDIR)$(includedir)/bareos/`basename $$I`; \
	done

libtool-install: all
	$(MKDIR) $(DESTDIR)$(libdir)
	$(RMF) $(DESTDIR)$(libdir)/libbareos-[0-9]*.so $(DESTDIR)$(libdir)/libbareos.la
	$(RMF) $(DESTDIR)$(libdir)/libbareoscfg-[0-9]*.so $(DESTDIR)$(libdir)/libbareoscfg.la
	$(LIBTOOL_INSTALL_FINISH) $(INSTALL_LIB) libbareos.la $(DESTDIR)$(libdir)
	$(LIBTOOL_INSTALL_FINISH) $(INSTALL_LIB) libbareoscfg.la $(DESTDIR)$(libdir)

install: @LIBTOOL_INSTALL_TARGET@ @INCLUDE_INSTALL_TARGET@

libtool-clean:
	@find . -name '*.lo' -print | xargs $(LIBTOOL_CLEAN) $(RMF)
	@$(RMF) *.la
	@$(RMF) -r .libs _libs

clean:	libtool-clean
	@$(RMF) core a.out *.o *.bak *.tex *.pdf *~ *.intpro *.extpro 1 2 3

realclean: clean
	@$(RMF) tags

distclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)

# Semi-automatic generation of dependencies:
# Use gcc -M because X11 `makedepend' doesn't work on all systems
# and it also includes system headers.
# `semi'-automatic since dependencies are generated at distribution time.

depend:
	@$(MV) Makefile Makefile.bak
	@$(SED) "/^# DO NOT DELETE:/,$$ d" Makefile.bak > Makefile
	@$(ECHOCMD) "# DO NOT DELETE: nice dependency list follows" >> Makefile
	@for src in $(LIBBAREOS_SRCS) $(LIBBAREOSCFG_SRCS); do \
	    $(CXX) -S -M -MT `basename $$src .c`$(DEFAULT_OBJECT_TYPE) $(CPPFLAGS) $(XINC) $(INCLUDES) $$src >> Makefile; \
	done
	@if test -f Makefile ; then \
	    $(RMF) Makefile.bak; \
	else \
	   $(MV) Makefile.bak Makefile; \
	   echo " ===== Something went wrong in make depend ====="; \
	fi

# -----------------------------------------------------------------------
# DO NOT DELETE: nice dependency list follows
