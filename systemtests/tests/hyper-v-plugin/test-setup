#!/bin/bash

#   BAREOSÂ® - Backup Archiving REcovery Open Sourced
#
#   Copyright (C) 2025-2025 Bareos GmbH & Co. KG
#
#   This program is Free Software; you can redistribute it and/or
#   modify it under the terms of version three of the GNU Affero General Public
#   License as published by the Free Software Foundation and included
#   in the file LICENSE.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
#   02110-1301, USA.

set -e
set -o pipefail
set -x
set -u

#shellcheck source=../../environment.in
. ./environment

#shellcheck source=../../scripts/functions
. "${BAREOS_SCRIPTS_DIR}"/functions

"${BAREOS_SCRIPTS_DIR}"/cleanup
"${BAREOS_SCRIPTS_DIR}"/setup

bin/bareos start
bin/bareos status

# make sure, director is up and running.
print_debug "$(bin/bconsole <<<"status dir")"

vm_id=$(ps_exec "\$ErrorActionPreference= 'silentlycontinue'; \$vm = \$(Get-VM -Name ${vm_name}); if ($vm.Length -eq 1) { Write-Host -NoNewLine \$vm.VMId }")

if [[ -z "${vm_id}" ]]; then
  echo "'${vm_name}' is not a valid backup target. There should be exactly one vm called that."
  exit 1
fi

other_count=$(ps_exec "\$ErrorActionPreference= 'silentlycontinue'; \$other_vms=\$(Get-VM | Where-Object { \$_.Name -ne \"${vm_name}\"}); Write-Host -NoNewLine \$other_vms.Length")

if [[ "${other_count}" -ne 0 ]]; then
  echo "this test currently deletes all non backed up vms.  So please delete them yourself first"
  exit 1
fi

cat <<EOF >"${tmp}/vm_id"
vm_id=\"${vm_id}\"
EOF
