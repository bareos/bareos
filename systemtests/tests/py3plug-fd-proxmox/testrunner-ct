#!/bin/bash
set -e
set -o pipefail
set -u
#
# This systemtest tests the vmware plugin functionality
# of the Bareos FD by using the supplied module
#   BareosFdPluginProxmox.py
#
TestName="$(basename "$(pwd)")"
export TestName

JobName=backup-proxmox-ct
#shellcheck source=../environment.in
. ./environment

export PATH="${current_test_directory}/sbin:${current_test_directory}/bin:$PATH"

JobName=backup-proxmox-ct
#shellcheck source=../scripts/functions
. "${rscripts}"/functions
"${rscripts}"/cleanup
"${rscripts}"/setup

TEMPLATE=local:vztmpl/fedora-42-default_20250428_amd64.tar.xz
GUESTID=999002
pct stop "${GUESTID}" || :
pct destroy "${GUESTID}" || :
pct create "${GUESTID}" "${TEMPLATE}"
pct start "${GUESTID}"

start_test

cat <<END_OF_DATA >$tmp/bconcmds
@$out ${NULL_DEV}
messages
@$out $tmp/log1.out
setdebug level=100 storage=File
label volume=TestVolume001 storage=File pool=Full
run job=$JobName level=Full yes
status director
status client
status storage=File
wait
messages

END_OF_DATA

run_bareos "$@"

pct stop "${GUESTID}"
pct destroy "${GUESTID}"

# make sure GUESTID was destroyed
#pct list | grep -v "${GUESTID}"

cat <<END_OF_DATA2 >$tmp/bconcmds
@#
@# now do a restore
@#
@$out $tmp/log2.out
wait
restore client=bareos-fd fileset=ProxmoxTestCT where=/ select all done
yes
wait
messages
quit

END_OF_DATA2

# pluginoptions=python:localvmdk=yes 

run_bareos "$@"

pct start "${GUESTID}"

# make sure GUESTID was recovered
pct list | grep "${GUESTID}"


check_for_zombie_jobs storage=File

check_two_logs


# cleanup
pct stop "${GUESTID}"
pct destroy "${GUESTID}"


# Check restored disk image content
#restored_disk_image=$(find $tmp/bareos-restores -type f  -name "*.vmdk" | tail -1)
#if file "$restored_disk_image" | grep "Proxmox4 disk image"; then
#    echo "Restored disk image type OK"
#else
#    echo "Restored disk image ERROR: is not Proxmox disk image"
#    dstat=1
#fi

end_test
