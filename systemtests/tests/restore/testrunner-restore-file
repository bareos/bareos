#!/bin/bash

#   BAREOSÂ® - Backup Archiving REcovery Open Sourced
#
#   Copyright (C) 2023-2025 Bareos GmbH & Co. KG
#
#   This program is Free Software; you can redistribute it and/or
#   modify it under the terms of version three of the GNU Affero General Public
#   License as published by the Free Software Foundation and included
#   in the file LICENSE.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
#   02110-1301, USA.

#
# restore some single files
#

set -e
set -o pipefail
set -u

TestName="$(basename "$(pwd)")"
export TestName

#shellcheck source=../../environment.in
. ./environment

#shellcheck source=../../scripts/functions
. "${BAREOS_SCRIPTS_DIR}"/functions

#shellcheck source=functions
. functions

start_test

origfile1="$(pwd)/tmp/data/build/src/tests/cats_test.c"
origfile2="$(pwd)/tmp/data/build/src/tests/bregtest.c"
origfile3="$(pwd)/tmp/data/build/src/tests/bbatch.c"

for f in "$origfile1" "$origfile2" "$origfile3"; do
  if [[ -f "$tmp/bareos-restores/$f" ]]; then
    rm "$tmp/bareos-restores/$f"
  fi
done

if on_windows_host; then
  file1=$(cygpath -w -m "$origfile1")
  file2=$(cygpath -w -m "$origfile2")
  file3=$(cygpath -w -m "$origfile3")
else
  file1="$origfile1"
  file2="$origfile2"
  file3="$origfile3"
fi

cat <<END_OF_DATA >"$tmp/bconcmds"
@$out ${NULL_DEV}
setdebug level=100 storage=File
@$out ${runner_tmp}/log1.out
status director
status client
status storage=File
wait
messages
@$out ${runner_tmp}/jobs.out
list jobs
@$out ${runner_tmp}/should-work.out
restore client=bareos-fd fileset=SelfTest where=$tmp/bareos-restores \
	file=$file1 \
	done yes
wait
messages
@$out ${runner_tmp}/restore-from-selected-job.out
restore
12
1
mark $file2
done
yes
wait
messages
@$out ${runner_tmp}/restore-from-list-and-time.out
restore
8
$(($(date +%Y) + 1))
$file3

yes
wait
messages
quit
END_OF_DATA

run_bconsole
check_for_zombie_jobs storage=File

check_preconditions

expect_grep "Start Restore Job" \
  "${runner_tmp}/should-work.out" \
  "The first restore job was not started."

expect_grep "Start Restore Job" \
  "${runner_tmp}/restore-from-selected-job.out" \
  "The second restore job was not started."

expect_grep "Start Restore Job" \
  "${runner_tmp}/restore-from-list-and-time.out" \
  "The third restore job was not started."

expect_grep "1 file selected to be restored." \
  "${runner_tmp}/should-work.out" \
  "Expected success; found failure"

dest1="$tmp/bareos-restores/$file1"
dest2="$tmp/bareos-restores/$file2"
dest3="$tmp/bareos-restores/$file3"
if on_windows_host; then
  dest1=$(remove_colon_from_windows_path "$dest1")
  dest2=$(remove_colon_from_windows_path "$dest2")
  dest3=$(remove_colon_from_windows_path "$dest3")
fi

if ! cmp -s "$dest1" "$origfile1"; then
  exit 2
fi

if ! cmp -s "$dest2" "$origfile2"; then
  exit 3
fi

if ! cmp -s "$dest3" "$origfile3"; then
  exit 4
fi

end_test
