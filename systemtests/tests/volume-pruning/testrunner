#!/bin/bash
set -e
set -o pipefail
set -u
#
# run multiple jobs and verify that the pruning mechanism
# logs the jobs being pruned
#
#
TestName="$(basename "$(pwd)")"
export TestName

JobName=backup-bareos-fd

#shellcheck source=../environment.in
. ./environment

#shellcheck source=../scripts/functions
. "${rscripts}"/functions
"${rscripts}"/cleanup
"${rscripts}"/setup



# Fill ${BackupDirectory} with data.
setup_data

start_test

cat <<END_OF_DATA >$tmp/bconcmds
@$out /dev/null
messages
@$out $tmp/log1.out
setdebug level=100 storage=File
label volume=TestVolume001 storage=File pool=Full
run job=$JobName yes
status director
status client
status storage=File
wait
messages

run job=$JobName Level=Full yes
run job=$JobName Level=Full yes
run job=$JobName Level=Full yes
run job=$JobName Level=Full yes
run job=$JobName Level=Full yes
wait
@sleep 10
run job=$JobName Level=Full yes

@#
@# now do a restore
@#
wait
restore client=bareos-fd fileset=SelfTest where=$tmp/bareos-restores select all done
yes
wait
messages

@$out $tmp/log2.out
@#
@# now prune using the commandline
@#
@sleep 6
update volume=TestVolume001 volstatus=Used
prune volume=TestVolume001 yes
messages
quit
END_OF_DATA

run_bareos "$@"
check_for_zombie_jobs storage=File
stop_bareos

check_two_logs

if ! grep "Purging the following JobIds: 1,2,3,4,5,6" "$tmp"/log1.out; then
  echo "'Purging the following JobIds: 1,2,3,4,5,6' not found in $tmp/log1.out" >&2
  grep 'Purging the' "$tmp"/log1.out >&2 || :
  estat=1
fi

if ! grep -F 'Volume "TestVolume001" contains no jobs after pruning.' $tmp/log2.out; then
  echo "'Volume \"TestVolume001\" contains no jobs after pruning.' not found in $tmp/log2.out" >&2
  grep 'Volume.*contains no jobs after pruning.' $tmp/log2.out >&2 || :
  estat=1
fi

end_test
