#!/bin/bash
#   BAREOSÂ® - Backup Archiving REcovery Open Sourced
#
#   Copyright (C) 2020-2021 Bareos GmbH & Co. KG
#
#   This program is Free Software; you can redistribute it and/or
#   modify it under the terms of version three of the GNU Affero General Public
#   License as published by the Free Software Foundation and included
#   in the file LICENSE.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
#   02110-1301, USA.


local_db_stop_server() {
  echo "stop db server"
  if [ $UID -eq 0 ]; then
    su postgres -c "${POSTGRES_BIN_PATH}/pg_ctl  --pgdata=data stop" || :
  else
    ${POSTGRES_BIN_PATH}/pg_ctl  --silent --pgdata=data stop || :
  fi
  tries=10
  while ${POSTGRES_BIN_PATH}/psql --host="$1" --list > /dev/null 2>&1; do
    echo " -- $tries -- "
    [ $((tries-=1)) -eq 0 ] && {
      echo "Could not stop postgres server"
      return 1
    }
    sleep 1
  done
}

local_db_prepare_files() {
  echo "Prepare files"
  rm --recursive --force tmp data log wal_archive
  mkdir tmp data log wal_archive
  if [ $UID -eq 0 ]; then
    chown postgres  tmp data log wal_archive
    LANG= su postgres -c "${POSTGRES_BIN_PATH}/pg_ctl  --pgdata=data --log=log/postgres.log initdb"
  else
    LANG= ${POSTGRES_BIN_PATH}/pg_ctl  --silent --pgdata=data --log=log/postgres.log initdb
  fi

  {
    echo "listen_addresses = ''"
    echo "unix_socket_directories = '$1'"
    echo "wal_level = archive"
    echo "archive_mode = on"
    echo "archive_command = 'cp %p ../wal_archive'"
    echo "max_wal_senders = 10"
  } >> data/postgresql.conf
}

local_db_start_server() {
  echo "start db server"
  if [ $UID -eq 0 ]; then
    su postgres -c "${POSTGRES_BIN_PATH}/pg_ctl  -w --pgdata=data --log=log/logfile start"
  else
    ${POSTGRES_BIN_PATH}/pg_ctl -w --pgdata=data --log=log/logfile start
  fi
#  tries=60
#  while ! ${POSTGRES_BIN_PATH}/psql --host="$1" --list > /dev/null 2>&1; do
#    [ $((tries-=1)) -eq 0 ] && {
#      echo "Could not start postgres server"
#      return 1
#    }
#    sleep 1
#  done

#  tries=60
#  while ! echo "select pg_is_in_recovery()" | ${POSTGRES_BIN_PATH}/psql --host="$1" postgres | grep -q -e "^ f$" ; do
#    [ $((tries-=1)) -eq 0 ] && {
#      echo "Could not start postgres server (still recovering)"
#      return 1
#    }
#    sleep 1
#  done

  return 0
}

local_db_create_superuser_role() {
  if [ $UID -eq 0 ]; then
    su postgres -c "${POSTGRES_BIN_PATH}/createuser  -s --host=$1 root"
    su postgres -c "${POSTGRES_BIN_PATH}/createdb    --host=$1 root"
  else
    echo "CREATE ROLE root WITH SUPERUSER CREATEDB CREATEROLE REPLICATION LOGIN" | ${POSTGRES_BIN_PATH}/psql -h "$1" postgres
  fi
}

setup_local_db() {
  local_db_stop_server "$1" || true
  local_db_prepare_files "$1"
  if ! local_db_start_server "$1"; then return 1; fi
  local_db_create_superuser_role "$1"
  if [ $UID -eq 0 ]; then
    echo stop server with "su postgres -c '${POSTGRES_BIN_PATH}/pg_ctl  --pgdata=data stop'"
  else
    echo stop server with "${POSTGRES_BIN_PATH}/pg_ctl  --pgdata=data stop"
  fi
  return 0
}
